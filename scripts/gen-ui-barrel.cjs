/* scripts/gen-ui-barrel.cjs */
const fs = require("fs");
const path = require("path");

const UI_DIR = path.resolve(process.cwd(), "src/components/ui");
const OUT_FILE = path.join(UI_DIR, "index.ts");

/** Files we do NOT export from directly */
const FILE_BLOCKLIST = new Set([
  "index.ts",
  "index.tsx",
  "_.*",              // internal pattern (prefix underscore)
]);

/** Extensions we consider as modules to export */
const VALID_EXTS = new Set([".ts", ".tsx"]);

/** Filenames to ignore by suffix */
const IGNORE_SUFFIXES = [
  ".d.ts",
  ".test.ts",
  ".test.tsx",
  ".spec.ts",
  ".spec.tsx",
  ".stories.ts",
  ".stories.tsx",
];

/** Returns true if file should be ignored */
function shouldIgnoreFile(name) {
  if (FILE_BLOCKLIST.has(name)) return true;
  if (name.startsWith("_")) return true;
  if (!VALID_EXTS.has(path.extname(name))) return true;
  return IGNORE_SUFFIXES.some((s) => name.endsWith(s));
}

/** Collect export targets in ui dir: either folders or files */
function collectTargets(uiDir) {
  const entries = fs.readdirSync(uiDir, { withFileTypes: true });

  const dirs = [];
  const files = [];

  for (const e of entries) {
    // Skip hidden
    if (e.name.startsWith(".")) continue;

    const full = path.join(uiDir, e.name);
    if (e.isDirectory()) {
      // Export only if directory has an index.ts or index.tsx
      const hasIndex =
        fs.existsSync(path.join(full, "index.ts")) ||
        fs.existsSync(path.join(full, "index.tsx"));
      if (hasIndex) dirs.push(e.name);
    } else if (e.isFile()) {
      if (shouldIgnoreFile(e.name)) continue;
      files.push(e.name);
    }
  }

  // Normalize to module specifiers
  const dirSpecifiers = dirs.map((d) => `./${d}`);
  const fileSpecifiers = files.map((f) => `./${path.basename(f, path.extname(f))}`);

  // Sort for stable output
  dirSpecifiers.sort();
  fileSpecifiers.sort();

  return [...dirSpecifiers, ...fileSpecifiers];
}

function buildBarrel(specifiers) {
  const header = `/* Auto-generated by scripts/gen-ui-barrel.cjs. Do not edit by hand. */\n`;
  const lines = specifiers.map((s) => `export * from "${s}";`);
  return header + lines.join("\n") + (lines.length ? "\n" : "");
}

function main() {
  if (!fs.existsSync(UI_DIR)) {
    console.error(`Missing directory: ${UI_DIR}`);
    process.exit(1);
  }
  const specifiers = collectTargets(UI_DIR);
  const content = buildBarrel(specifiers);

  if (fs.existsSync(OUT_FILE)) {
    const current = fs.readFileSync(OUT_FILE, "utf8");
    if (current === content) {
      console.log("No changes to components/ui/index.ts");
      return;
    }
  }

  fs.writeFileSync(OUT_FILE, content, "utf8");
  console.log(`Wrote ${OUT_FILE} with ${specifiers.length} exports`);
}

main();
